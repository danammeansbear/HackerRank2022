using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Result
{

    /*
     * Complete the 'flippingBits' function below.
     *
     * The function is expected to return a LONG_INTEGER.
     * The function accepts LONG_INTEGER n as parameter.
     */

    public static long flippingBits(long n)
    {
        StringBuilder resultString = new StringBuilder();
        //StringBuilder resultString = new String Builder();
        string binary = Convert.ToString(n, 2).PadLeft(32, '0');
        //string binary = Convert.ToString(n, 2).PadLeft(32, '0');
        for (int i = 0; i < binary.Length; i++){
            //For (int i = 0; i < binary.Length; i++)
            if (binary[i] == '0'){
                //if (binary[i] == '0'){
                resultString.Append('1');
                //resultString.Append('1');
            }
            //}
            else{
                //else{
                resultString.Append('0');
                //resultString.Append('0');
            }
            //}
        }
        //}
        
        Console.WriteLine(resultString);
        long result = Convert.ToInt64(resultString.ToString(), 2);
        return result;
    }

}

class Solution
{
    public static void Main(string[] args)
    {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        int q = Convert.ToInt32(Console.ReadLine().Trim());

        for (int qItr = 0; qItr < q; qItr++)
        {
            long n = Convert.ToInt64(Console.ReadLine().Trim());

            long result = Result.flippingBits(n);

            textWriter.WriteLine(result);
        }

        textWriter.Flush();
        textWriter.Close();
    }
}
